JMP main
JMP isr

quit: DW 0 ; quit = false

isr:
PUSH A ; The ISR will use register A.
MOVB AL , BL ; Get the currently displayed character .
INCB AL ; Increase its ASCII value .
MOVB BL , AL ; Print out the new value .
CMPB AL, 3 ; Check if ’3 ’ has been reached .
JNE timerdone ; If not , we are done .
MOV [quit] , 1 ; Otherwise set quit to true .
timerdone:
MOV A, 2 ; Timer interrupt mask .
OUT 2 ; Timer has been serviced .
POP A ; Restore the register A.
IRET ; Return from ISR .

main:
MOV SP , 0x0FFF ; Initialize the stack pointer .
MOVB BL , 0 ; Display ’0 ’ on display .
MOV A, 5000 ; 1 second = 5000 clock cycles .
OUT 3 ; Preset the timer to 5000.

MOV A, 2 ; Timer interrupt mask .
OUT 0 ; Set the mask .
STI ; Enable interrupts .
loop:
MOV A, [quit] ; Read the global quit variable .
CMP A, 1 ; Check it ’s value .
JE break ; If true , break the loop .
JMP loop ; Otherwise , read the value again .
break:
CLI ; Disable interrupts .
HLT 